#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main() {
    int num_states, num_symbols, num_final;
    int i, j, k, n;
    int symbol[5], final_state[5], present_state[20], next_state[20];
    int mat[10][10][10];
    char input[20];

    // Get the number of states and input symbols
    printf("How many states in the NFA: ");
    scanf("%d", &num_states);
    printf("How many symbols in the input alphabet: ");
    scanf("%d", &num_symbols);

    // Get the input symbols
    for (i = 0; i < num_symbols; i++) {
        printf("Enter the input symbol %d: ", i + 1);
        scanf("%d", &symbol[i]);
    }

    // Get the number of final states and the final states themselves
    printf("How many final states: ");
    scanf("%d", &num_final);
    for (i = 0; i < num_final; i++) {
        printf("Enter the final state %d: ", i + 1);
        scanf("%d", &final_state[i]);
    }

    // Initialize the transition table with -1 (indicating no transition)
    memset(mat, -1, sizeof(mat));

    // Fill in the 3D transition table based on user input
    for (i = 0; i < num_states; i++) {
        for (j = 0; j < num_symbols; j++) {
            printf("How many transitions from state %d for input %d: ", i, symbol[j]);
            scanf("%d", &n);
            for (k = 0; k < n; k++) {
                printf("Enter transition %d from state %d for input %d: ", k + 1, i, symbol[j]);
                scanf("%d", &mat[i][j][k]);
            }
        }
    }

    // Display the transitions for verification
    printf("The transitions are stored as follows:\n");
    for (i = 0; i < num_states; i++) {
        for (j = 0; j < num_symbols; j++) {
            for (k = 0; k < 10 && mat[i][j][k] != -1; k++) {
                printf("mat[%d][%d][%d] = %d\n", i, j, k, mat[i][j][k]);
            }
        }
    }

    // Process input strings
    while (1) {
        printf("Enter the input string: ");
        scanf("%s", input);

        int l = strlen(input);
        present_state[0] = 0;  // Starting from the initial state
        int prev_trans = 1;

        for (i = 0; i < l; i++) {
            int inp = -1;
            for (j = 0; j < num_symbols; j++) {
                if (input[i] - '0' == symbol[j]) {
                    inp = j;
                    break;
                }
            }

            if (inp == -1) {
                printf("Invalid input symbol\n");
                break;
            }

            int new_trans = 0;
            for (j = 0; j < prev_trans; j++) {
                int p = present_state[j];
                for (k = 0; k < 10 && mat[p][inp][k] != -1; k++) {
                    next_state[new_trans++] = mat[p][inp][k];
                }
            }

            memcpy(present_state, next_state, new_trans * sizeof(int));
            prev_trans = new_trans;
        }

        // Check if any of the current states are final states
        int accepted = 0;
        for (i = 0; i < prev_trans; i++) {
            for (j = 0; j < num_final; j++) {
                if (present_state[i] == final_state[j]) {
                    accepted = 1;
                    break;
                }
            }
            if (accepted) break;
        }

        if (accepted)
            printf("Accepted\n");
        else
            printf("Not accepted\n");

        printf("Try with another input\n");
    }

    return 0;
}
